openapi: 3.0.0
info:
  title: Trello Service
  description: Let's try to create a competitor for Trello!
  version: 1.0.0

servers:
  - url: /api

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
        passsword:
          type: string
    Profile:
      properties:
        id:
          type: string
        role:
          type: string
        userId:
          type: string
        follows:
          type: array
          items:
            type: string
    Word:
      type: object
      properties:
        id:
          type: string
        wordname:
          type: string
        meaning:
          type: string
        author_id:
          type: string
        extended_description:
          type: string
        usages:
          type: string
        synonyms:
          type: string
        tags:
          type: array
          items:
            type: string
        created_at:
          type: string
        updated_at:
          type: string
        is_anonymous:
          type: boolean
        is_on_report_feed:
          type: boolean
        userId:
          type: string
        favorites:
          type: array
          items:
            type: string
        likes:
          type: number
        dislike:
          type: number
    RefreshToken:
      required:
        - title
      properties:
        id:
          type: string
        jwtId:
          type: string
        used:
          type: boolean
        userId:
          type: string
        invalidated:
          type: boolean
        expiryDate:
          type: date
    Code:
      email:
        type: String,
      code:
        type: String,
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /user:
    post:
      tags:
        - User
      summary: Register User
      description: Register a new user (remove password from response) and returns a Access-token & Refresh-token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                username:
                  type: string
                  description: The user's login
                email:
                  type: string
                  description: The user's email
                password:
                  type: string
                  description: The user's password
              required:
                - name
                - email
                - password
      responses:
        200:
          description: The user has been registred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: BadRequest (Please fill all fields correctly. / Repeat password does not match the password)
        422:
          description: UnprocessableEntity (Email already registered / Username already registered)
    get:
      security:
        - bearerAuth: []
      tags:
        - User
      summary: Get User
      description: Gets user (remove password from response)
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        401:
          description: Bad Request (User with the id was not found / Authorization Header is not set / JWT is not valid )
    put:
      security:
        - bearerAuth: []
      tags:
        - User
      summary: Put User
      description: Update user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                username:
                  type: string
                  description: The user's login
                email:
                  type: string
                  description: The user's email
                bio:
                  type: string
                  description: The user's bio
                password:
                  type: string
                  description: The user's password
              required:
                - password
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        401:
          description: Bad Request (User with the id was not found / Authorization Header is not set / JWT is not valid )
        402:
          description: Bad Request(Wrong password)
  /user/login:
    post:
      tags:
        - User
      summary: Login User
      description: Logins a user and returns (remove password from response) a Access-token & Refresh-token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                email:
                  type: string
                  description: Email
                password:
                  type: string
                  description: Password
              required:
                - email
                - password
      responses:
        200:
          description: The user has been logined.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: Not Found(Authentication failed, email not found / Authentication failed, user not found)
        402:
          description: Bad Request(Wrong password)
        #register token errors
  /user/change-password:
    put:
      tags:
        - User
      security:
        - bearerAuth: []
      summary: Change password
      description: Get new password (repeated) and change it
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                old_password:
                  type: string
                  description: Old password
                new_password1:
                  type: string
                  description: New password
                new_password2:
                  type: string
                  description: New password (repeated)
              required:
                - old_password
                - new_password1
                - new_password2
      responses:
        200:
          description: Password is changed.
          content:
            application/json:
              schema:
                type: object
                title: response example
                properties:
                  message:
                    type: string
                    description: User password has been changed successfully!
        400:
          description: Bad Request(Old password is incorrect! / new_password1 does not match new_password2!)
        401:
          description: Bad Request (Authorization Header is not set / JWT is not valid )
  /user/refresh:
    post:
      tags:
        - User
      security:
        - bearerAuth: []
      summary: Refresh Access-token & Refresh-token
      description: Get Authorization and returns a Access-token & Refresh-token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                accessToken:
                  type: string
                  description: AccessToken
                refreshToken:
                  type: string
                  description: RefreshToken
              required:
                - accessToken
                - refreshToken
      responses:
        200:
          description: The user has been logined.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Bad Request (Authorization Header is not set / JWT is not valid )
        404:
          description: Not Found(Authentication failed, email not found / Authentication failed, user not found)
        402:
          description: Bad Request(Wrong password)
  /user/logout:
    post:
      tags:
        - User
      security:
        - bearerAuth: []
      summary: Logout
      description: Logout. When somebody
        logout User, Refresh-token will been invalided
      responses:
        204:
          description: Logout successfully
        401:
          description: Bad Request (Authorization Header is not set / JWT is not valid / Refresh Token does not exist )
  /user/send-user-verification-email:
    get:
      security:
        - bearerAuth: []
      tags:
        - User
      summary: Send Verification Email
      description: Send Verification Email (remove password from response)
      responses:
        204:
          description: The activation link was sent to your registered email address.
        404:
          description: NotFound (User with the id was not found)
        401:
          description: Bad Request (User with the id was not found / Authorization Header is not set / JWT is not valid)
  /user/verify_email/:userId/:secretCode:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      - name: secretCode
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - User
      summary: Get Verification by UserId and SecretCode
      description: Get Verification by UserId and SecretCode ( remove password from response )
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Unauthorized (Secret Code does not exist, Unauthorized)
  /user/send-password-reset-email:
    post:
      tags:
        - User
      summary: Send password reset by Email
      description: Send password reset by Email code verification (front-end)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                email:
                  type: string
                  description: Email
              required:
                - email
      responses:
        204:
          description: The reset password link was sent to your registered email address..
        404:
          description: NotFound (User with the id was not found)
        401:
          description: Bad Request (Please provide your registered email address!)
  /profiles/:username:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Profile
      summary: Get Profile
      description: Get Profile ( with Authorization Bearer )
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                role:
                  type: string
                  description: The user's login
                userId:
                  type: string
                  description: The user's email
                follows:
                  type: string
                  description: The user's password
              required:
                - role
                - userId
                - follows
      responses:
        200:
          description: Profile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        404:
          description: NotFound (User does not exist)
  /profiles/:username/follow:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - Profile
      summary: Follow Profile
      description: Get Profile ( with Authorization Bearer )
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                role:
                  type: string
                  description: The user's login
                userId:
                  type: string
                  description: The user's email
                follows:
                  type: string
                  description: The user's password
              required:
                - role
                - userId
                - follows
      responses:
        200:
          description: Profile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        404:
          description: NotFound (User does not exist)
  /profiles/:username/unfollow:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
    delete:
      tags:
        - Profile
      summary: Unfollow Profile
      description: Get Profile ( with Authorization Bearer )
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                role:
                  type: string
                  description: The user's login
                userId:
                  type: string
                  description: The user's email
                follows:
                  type: string
                  description: The user's password
              required:
                - role
                - userId
                - follows
      responses:
        200:
          description: Profile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        404:
          description: NotFound (User does not exist)
  /profiles/:username/promote:
    parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - Profile
      summary: Promote to Moderator
      description: Get Profile ( with Authorization Bearer )
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                role:
                  type: string
                  description: The user's login
                userId:
                  type: string
                  description: The user's email
                follows:
                  type: string
                  description: The user's password
              required:
                - role
                - userId
                - follows
      responses:
        200:
          description: Profile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        404:
          description: NotFound (User does not exist)
  /dictionary/word:
    get:
      tags:
        - Word
      security:
        - bearerAuth: []
      summary: get words
      description: get words and return array of words
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Word'
        401:
          description: Bad Request (Words were not found)
    post:
      tags:
        - Word
      security:
        - bearerAuth: []
      summary: create a word
      description: create a word and return created word
      requestBody:
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                id:
                  type: string
                  description: word's id
                wordname:
                  type: string
                  description: word's wordname
                meaning:
                  type: string
                  description: word's meaning
                extended_description:
                  type: string
                  description: word's extended description
                usages:
                  type: string
                  description: word's usages
                synonyms:
                  type: string
                  description: word's synonyms
                tags:
                  type: array
                  description: word's tags
                  items:
                    type: string
                is_anonymous:
                  type: boolean
                  description: is anonymous
                is_on_report_feed:
                  type: boolean
                  description: is on report feed
              required:
                - wordname
                - meaning
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Word'
        400:
          description: BadRequest (Please fill all fields correctly)
        401:
          description: Bad Request (User with the id was not found)
  /dictionary/word/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Word
      security:
        - bearerAuth: []
      summary: get a word
      description: get a word and return the word
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Word'
        401:
          description: Bad Request (Word with the id was not found)
    put:
      tags:
        - Word
      security:
        - bearerAuth: []
      summary: update a word
      description: update a word and return the updated word
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                wordname:
                  type: string
                  description: word's wordname
                meaning:
                  type: string
                  description: word's meaning
                extended_description:
                  type: string
                  description: word's extended description
                usages:
                  type: string
                  description: word's usages
                synonyms:
                  type: string
                  description: word's synonyms
                tags:
                  type: array
                  description: word's tags
                  items:
                    type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Word'
        401:
          description: Bad Request (Word with the id was not found)
    delete:
      tags:
        - Word
      security:
        - bearerAuth: []
      summary: delete a word
      description: delete a word and return a message about the deleted word
      responses:
        200:
          description: Successful operation
        401:
          description: Bad Request (Word with the id was not found)
  /dictionary/word/{id}/like:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    put:
      tags:
        - Word
      security:
        - bearerAuth: []
      summary: like a word
      description: like a word and return true - liked word or changed dislike to like, otherwise false
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Word'
        401:
          description: Bad Request (Word with the id was not found or Profile with the id was not found)
  /dictionary/word/{id}/dislike:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    put:
      tags:
        - Word
      security:
        - bearerAuth: []
      summary: dislike a word
      description: dislike a word and return true - disliked word or changed like to dislike, otherwise false
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Word'
        401:
          description: Bad Request (Word with the id was not found or Profile with the id was not found)
  /dictionary/word/{id}/favorite:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - Word
      security:
        - bearerAuth: []
      summary: add a favorite word
      description: add a favorite word and return the word
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Word'
        401:
          description: Bad Request (Word with the id was not found or Profile with the id was not found)
  /dictionary/word/{id}/unfavorite:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    delete:
      tags:
        - Word
      security:
        - bearerAuth: []
      summary: delete a favorite word
      description: delete a favorite word and return the word
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Word'
        401:
          description: Bad Request (Word with the id was not found or Profile with the id was not found)
  /dictionary/feed:
    get:
      tags:
        - Word
      summary: get feed
      description: get feed and return filtered array of words
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Word'
        401:
          description: Bad Request (Words were not found)
